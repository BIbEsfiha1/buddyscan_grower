// Backup do componente anterior para referência
import React, { useState } from 'react';
import { scanQrCodeAndGetPlant } from '../services/plantService';
import { Plant } from '../types';
import QrCodeIcon from './icons/QrCodeIcon';

interface QrCodeScannerProps {
  onScanSuccess: (plant: Plant) => void;
  onScanError: (error: string) => void;
}

const QrCodeScanner: React.FC<QrCodeScannerProps> = ({ onScanSuccess, onScanError }) => {
  const [qrValue, setQrValue] = useState('');
  const [isScanning, setIsScanning] = useState(false);
  const [showManualInput, setShowManualInput] = useState(false);
  const [cameraActive, setCameraActive] = useState(true);

  // Simulação de escaneamento automático via câmera
  const simulateCameraScan = async () => {
    if (!cameraActive) return;
    setIsScanning(true);
    setTimeout(async () => {
      try {
        const randomQrValue = `PLANT-${Math.random().toString(36).substring(2, 10).toUpperCase()}`;
        const plant = await scanQrCodeAndGetPlant(randomQrValue);
        if (plant) {
          onScanSuccess(plant);
        } else {
          onScanError(`QR code não reconhecido: ${randomQrValue}`);
        }
      } catch (error) {
        onScanError('Erro ao processar o QR code.');
      } finally {
        setIsScanning(false);
      }
    }, 2000);
  };

  // Entrada manual de QR code
  const handleManualScan = async () => {
    if (!qrValue.trim()) {
      onScanError('Por favor, insira um valor de QR code.');
      return;
    }
    setIsScanning(true);
    try {
      const plant = await scanQrCodeAndGetPlant(qrValue);
      if (plant) {
        onScanSuccess(plant);
      } else {
        onScanError('Nenhuma planta encontrada com este QR code.');
      }
    } catch (error) {
      onScanError('Erro ao processar o QR code.');
    } finally {
      setIsScanning(false);
    }
  };

  React.useEffect(() => {
    if (cameraActive && !showManualInput) {
      simulateCameraScan();
    }
  }, [cameraActive]);

  return (
    <div className="flex flex-col space-y-4">
      {!showManualInput ? (
        <div className="flex flex-col items-center">
          <div className="relative w-full max-w-xs aspect-square mb-4 border-2 border-[#7AC943] rounded-lg overflow-hidden bg-black">
            <div className="absolute inset-0 flex items-center justify-center">
              {isScanning ? (
                <div className="animate-pulse text-white text-center">
                  <QrCodeIcon className="w-16 h-16 mx-auto mb-2 text-[#7AC943]" />
                  <p>Escaneando...</p>
                </div>
              ) : (
                <div className="text-white text-center">
                  <QrCodeIcon className="w-16 h-16 mx-auto mb-2" />
                  <p>Câmera não disponível</p>
                </div>
              )}
            </div>
            <div className="absolute top-0 left-0 w-full h-1 bg-[#7AC943] animate-scanline"></div>
          </div>
          <div className="w-full flex flex-col space-y-3">
            <button
              onClick={() => simulateCameraScan()}
              disabled={isScanning}
              className={`bg-[#7AC943] hover:bg-green-500 text-white font-semibold py-3 px-6 rounded-lg shadow transition-colors ${
                isScanning ? 'opacity-70 cursor-not-allowed' : ''
              }`}
            >
              {isScanning ? 'Escaneando...' : 'Tentar Novamente'}
            </button>
            <button
              onClick={() => {
                setCameraActive(false);
                setShowManualInput(true);
              }}
              className="text-[#7AC943] hover:text-green-600 font-medium py-2 transition-colors"
            >
              Digitar código manualmente
            </button>
          </div>
        </div>
      ) : (
        <div className="flex flex-col space-y-4">
          <div className="text-center mb-2">
            <p className="text-gray-600 dark:text-slate-300">
              Digite o valor do QR code da planta:
            </p>
          </div>
          <input
            type="text"
            value={qrValue}
            onChange={(e) => setQrValue(e.target.value)}
            placeholder="Ex: PLANT-ABC123XYZ"
            className="border border-gray-300 dark:border-slate-600 rounded-lg p-3 bg-white dark:bg-slate-800 text-gray-800 dark:text-slate-200 focus:outline-none focus:ring-2 focus:ring-[#7AC943]"
          />
          <div className="flex flex-col space-y-3">
            <button
              onClick={handleManualScan}
              disabled={isScanning}
              className={`bg-[#7AC943] hover:bg-green-500 text-white font-semibold py-3 px-6 rounded-lg shadow transition-colors ${
                isScanning ? 'opacity-70 cursor-not-allowed' : ''
              }`}
            >
              {isScanning ? 'Processando...' : 'Buscar Planta'}
            </button>
            <button
              onClick={() => {
                setShowManualInput(false);
                setCameraActive(true);
                setQrValue('');
              }}
              className="text-[#7AC943] hover:text-green-600 font-medium py-2 transition-colors"
            >
              Voltar para câmera
            </button>
          </div>
        </div>
      )}
      <style dangerouslySetInnerHTML={{ __html: `
        @keyframes scanline {
          0% { transform: translateY(0); }
          50% { transform: translateY(calc(100% * 4)); }
          100% { transform: translateY(0); }
        }
        .animate-scanline {
          animation: scanline 2s linear infinite;
        }
        .animate-pulse {
          animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;
        }
        @keyframes pulse {
          0%, 100% { opacity: 1; }
          50% { opacity: 0.5; }
        }
      `}} />
    </div>
  );
};

export default QrCodeScanner;
